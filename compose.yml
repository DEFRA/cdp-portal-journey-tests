################################################################################
# Docker Compose file for starting up the service for testing in GitHub workflow
# This template provides comparable infrastructure to the real environment.
#   - mongodb
#   - redis
#   - localstack (s3, sqs, sns)
#
# Both mongo and localstack have init scripts included for setting up resources
# on startup. These scripts are in docker/scripts.
#
# It also includes a selenium-chrome container for running the browser headless.
#
# The services being tested can either be started up here using the latest
# builds from dockerhub.
# In the example each service has a .env config file in docker/config/
# Services can reference each other by their container names.
# e.g. http://cdp-example-node-backend:3001/
#
################################################################################
services:

################################################################################
# Headless browser, used by the test suite to actually run the tests against the
# containers.
  selenium-chrome:

  # Run locally on a mac
  #  image: selenium/standalone-chrome:119.0
    image: selenium/standalone-chrome:latest
    ports:
      - 4444:4444

################################################################################
  mongodb:
    image: mongo:6
    volumes:
      - ./docker/scripts/mongodb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.hello().ok"]
      interval: 5s
      start_period: 5s
      retries: 3

################################################################################
  localstack:
    image: localstack/localstack:3.2.0
    ports:
      - 4566:4566
      - 4510-4559:4510-4559
    environment:
      - LOCALSTACK_HOST=127.0.0.1
      - SERVICES=s3,sqs,sns,dynamodb
      - LS_LOG=WARN
    env_file:
      - ./docker/config/defaults.env
    volumes:
      - ./docker/config/defaults.env:/etc/localstack/conf.d/defaults.env:ro
      - ./docker/scripts/localstack:/etc/localstack/init/ready.d
    healthcheck:
      test: ["CMD", "curl", "localhost:4566"]
      interval: 5s
      start_period: 5s
      retries: 3

################################################################################
  redis:
    image: redis:7
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 5s
      start_period: 2s
      retries: 5


################################################################################
#
# Add the services you want to test below.
#
################################################################################
  cdp-portal-frontend:
    image: defradigital/cdp-portal-frontend:latest
    ports:
      - 3000:3000
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "cdp.127.0.0.1.sslip.io:host-gateway"
    env_file:
      - ./docker/config/defaults.env
      - ./docker/config/cdp-portal-frontend.env
    environment:
      - PORT=3000
    depends_on:
      cdp-portal-backend:
        condition: service_started
      cdp-self-service-ops:
        condition: service_started
      cdp-user-service-backend:
        condition: service_started
      redis:
        condition: service_healthy
      cdp-portal-stubs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "http://localhost:3000/health"]
      interval: 3s
      start_period: 2s
      retries: 3

################################################################################
  cdp-portal-backend:
    image: defradigital/cdp-portal-backend:latest
    ports:
      - 5094:5094
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "cdp.127.0.0.1.sslip.io:host-gateway"
    env_file:
      - ./docker/config/defaults.env
      - ./docker/config/cdp-portal-backend.env
    environment:
      - PORT=5094
    depends_on:
      localstack:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      cdp-self-service-ops:
        condition: service_started
      cdp-user-service-backend:
        condition: service_started
      cdp-portal-stubs:
        condition: service_healthy

################################################################################
  cdp-user-service-backend:
    image: defradigital/cdp-user-service-backend:latest
    ports:
      - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "cdp.127.0.0.1.sslip.io:host-gateway"
    env_file:
      - ./docker/config/defaults.env
      - ./docker/config/cdp-user-service-backend.env
    environment:
      - PORT=3001
    depends_on:
      localstack:
        condition: service_healthy
      mongodb:
        condition: service_started
      cdp-portal-stubs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "http://cdp-user-service-backend:3001/health"]
      interval: 3s
      start_period: 2s
      retries: 3

################################################################################
  cdp-self-service-ops:
    image: defradigital/cdp-self-service-ops:latest
    ports:
      - 3009:3009
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "cdp.127.0.0.1.sslip.io:host-gateway"
    env_file:
      - ./docker/config/defaults.env
      - ./docker/config/cdp-self-service-ops.env
    environment:
      - PORT=3009
    depends_on:
      localstack:
        condition: service_healthy
      mongodb:
        condition: service_started
      cdp-portal-stubs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "http://cdp-self-service-ops:3009/health"]
      interval: 3s
      start_period: 2s
      retries: 3

################################################################################
  cdp-portal-stubs:
    image: defradigital/cdp-portal-stubs:latest
    env_file:
      - ./docker/config/defaults.env
      - ./docker/config/cdp-portal-stubs.env
    ports:
      - 3939:3939
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "cdp.127.0.0.1.sslip.io:host-gateway"
    environment:
      - PORT=3939
    depends_on:
      localstack:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "echo", "Y29uc3QgZT1yZXF1aXJlKCJodHRwIiksdD17aG9zdG5hbWU6ImxvY2FsaG9zdCIscG9ydDpwcm9jZXNzLmVudi5QT1JULHBhdGg6Ii9oZWFsdGgiLG1ldGhvZDoiR0VUIn0sbz1lLnJlcXVlc3QodCwoZT0+e2xldCB0PSIiO2Uub24oImRhdGEiLChlPT57dCs9ZX0pKSxlLm9uKCJlbmQiLCgoKT0+e3Byb2Nlc3MuZXhpdCgwKX0pKX0pKTtvLm9uKCJlcnJvciIsKGU9Pntwcm9jZXNzLmV4aXQoMSl9KSksby5lbmQoKTsK", "|", "base64", "-d", "|", "node", "-"]
      interval: 3s
      start_period: 2s

################################################################################
